# Code generated by moonworm : https://github.com/bugout-dev/moonworm
# Moonworm version : 0.2.4

import argparse
import json
import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Union

from brownie import Contract, network, project
from brownie.network.contract import ContractContainer
from eth_typing.evm import ChecksumAddress


PROJECT_DIRECTORY = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
BUILD_DIRECTORY = os.path.join(PROJECT_DIRECTORY, "build", "contracts")


def boolean_argument_type(raw_value: str) -> bool:
    TRUE_VALUES = ["1", "t", "y", "true", "yes"]
    FALSE_VALUES = ["0", "f", "n", "false", "no"]

    if raw_value.lower() in TRUE_VALUES:
        return True
    elif raw_value.lower() in FALSE_VALUES:
        return False

    raise ValueError(
        f"Invalid boolean argument: {raw_value}. Value must be one of: {','.join(TRUE_VALUES + FALSE_VALUES)}"
    )


def bytes_argument_type(raw_value: str) -> str:
    return raw_value


def get_abi_json(abi_name: str) -> List[Dict[str, Any]]:
    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    abi_json = build.get("abi")
    if abi_json is None:
        raise ValueError(f"Could not find ABI definition in: {abi_full_path}")

    return abi_json


def contract_from_build(abi_name: str) -> ContractContainer:
    # This is workaround because brownie currently doesn't support loading the same project multiple
    # times. This causes problems when using multiple contracts from the same project in the same
    # python project.
    PROJECT = project.main.Project("moonworm", Path(PROJECT_DIRECTORY))

    abi_full_path = os.path.join(BUILD_DIRECTORY, f"{abi_name}.json")
    if not os.path.isfile(abi_full_path):
        raise IOError(
            f"File does not exist: {abi_full_path}. Maybe you have to compile the smart contracts?"
        )

    with open(abi_full_path, "r") as ifp:
        build = json.load(ifp)

    return ContractContainer(PROJECT, build)


class ExploitContract:
    def __init__(self, contract_address: Optional[ChecksumAddress]):
        self.contract_name = "ExploitContract"
        self.address = contract_address
        self.contract = None
        self.abi = get_abi_json("ExploitContract")
        if self.address is not None:
            self.contract: Optional[Contract] = Contract.from_abi(
                self.contract_name, self.address, self.abi
            )

    def deploy(
        self,
        _shadowcorns_contract: ChecksumAddress,
        _unim_contract: ChecksumAddress,
        _rbw_contract: ChecksumAddress,
        transaction_config,
    ):
        contract_class = contract_from_build(self.contract_name)
        deployed_contract = contract_class.deploy(
            _shadowcorns_contract, _unim_contract, _rbw_contract, transaction_config
        )
        self.address = deployed_contract.address
        self.contract = deployed_contract
        return deployed_contract.tx

    def assert_contract_is_instantiated(self) -> None:
        if self.contract is None:
            raise Exception("contract has not been instantiated")

    def verify_contract(self):
        self.assert_contract_is_instantiated()
        contract_class = contract_from_build(self.contract_name)
        contract_class.publish_source(self.contract)

    def begin_hatching(self, terminus_pool_id: int, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.beginHatching(terminus_pool_id, transaction_config)

    def need_to_revert(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.needToRevert.call(block_identifier=block_number)

    def on_erc1155_batch_received(
        self,
        arg1: ChecksumAddress,
        arg2: ChecksumAddress,
        arg3: List,
        arg4: List,
        arg5: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.onERC1155BatchReceived(
            arg1, arg2, arg3, arg4, arg5, transaction_config
        )

    def on_erc1155_received(
        self,
        arg1: ChecksumAddress,
        arg2: ChecksumAddress,
        arg3: int,
        arg4: int,
        arg5: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.onERC1155Received(
            arg1, arg2, arg3, arg4, arg5, transaction_config
        )

    def on_erc721_received(
        self,
        operator: ChecksumAddress,
        from_: ChecksumAddress,
        token_id: int,
        data: bytes,
        transaction_config,
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.onERC721Received(
            operator, from_, token_id, data, transaction_config
        )

    def owner(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.owner.call(block_identifier=block_number)

    def proxy_call(self, _to: ChecksumAddress, _data: bytes, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.proxyCall(_to, _data, transaction_config)

    def rbw_contract(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.rbwContract.call(block_identifier=block_number)

    def renounce_ownership(self, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.renounceOwnership(transaction_config)

    def retried_count(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.retriedCount.call(block_identifier=block_number)

    def retry_hatching(self, token_id: int, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.retryHatching(token_id, transaction_config)

    def set_need_to_revert(self, _need_to_revert: bool, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.setNeedToRevert(_need_to_revert, transaction_config)

    def shadowcorns_contract(
        self, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.shadowcornsContract.call(block_identifier=block_number)

    def supports_interface(
        self, interface_id: bytes, block_number: Optional[Union[str, int]] = "latest"
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.supportsInterface.call(
            interface_id, block_identifier=block_number
        )

    def transfer_ownership(self, new_owner: ChecksumAddress, transaction_config) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.transferOwnership(new_owner, transaction_config)

    def unim_contract(self, block_number: Optional[Union[str, int]] = "latest") -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.unimContract.call(block_identifier=block_number)

    def withdraw_erc20(
        self, token_contract: ChecksumAddress, amount: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.withdrawERC20(token_contract, amount, transaction_config)

    def withdraw_erc1155(
        self, token_address: ChecksumAddress, token_id: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.withdrawErc1155(
            token_address, token_id, transaction_config
        )

    def withdraw_erc721(
        self, token_address: ChecksumAddress, token_id: int, transaction_config
    ) -> Any:
        self.assert_contract_is_instantiated()
        return self.contract.withdrawErc721(token_address, token_id, transaction_config)


def get_transaction_config(args: argparse.Namespace) -> Dict[str, Any]:
    signer = network.accounts.load(args.sender, args.password)
    transaction_config: Dict[str, Any] = {"from": signer}
    if args.gas_price is not None:
        transaction_config["gas_price"] = args.gas_price
    if args.max_fee_per_gas is not None:
        transaction_config["max_fee"] = args.max_fee_per_gas
    if args.max_priority_fee_per_gas is not None:
        transaction_config["priority_fee"] = args.max_priority_fee_per_gas
    if args.confirmations is not None:
        transaction_config["required_confs"] = args.confirmations
    if args.nonce is not None:
        transaction_config["nonce"] = args.nonce
    return transaction_config


def add_default_arguments(parser: argparse.ArgumentParser, transact: bool) -> None:
    parser.add_argument(
        "--network", required=True, help="Name of brownie network to connect to"
    )
    parser.add_argument(
        "--address", required=False, help="Address of deployed contract to connect to"
    )
    if not transact:
        parser.add_argument(
            "--block-number",
            required=False,
            type=int,
            help="Call at the given block number, defaults to latest",
        )
        return
    parser.add_argument(
        "--sender", required=True, help="Path to keystore file for transaction sender"
    )
    parser.add_argument(
        "--password",
        required=False,
        help="Password to keystore file (if you do not provide it, you will be prompted for it)",
    )
    parser.add_argument(
        "--gas-price", default=None, help="Gas price at which to submit transaction"
    )
    parser.add_argument(
        "--max-fee-per-gas",
        default=None,
        help="Max fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--max-priority-fee-per-gas",
        default=None,
        help="Max priority fee per gas for EIP1559 transactions",
    )
    parser.add_argument(
        "--confirmations",
        type=int,
        default=None,
        help="Number of confirmations to await before considering a transaction completed",
    )
    parser.add_argument(
        "--nonce", type=int, default=None, help="Nonce for the transaction (optional)"
    )
    parser.add_argument(
        "--value", default=None, help="Value of the transaction in wei(optional)"
    )
    parser.add_argument("--verbose", action="store_true", help="Print verbose output")


def handle_deploy(args: argparse.Namespace) -> None:
    network.connect(args.network)
    transaction_config = get_transaction_config(args)
    contract = ExploitContract(None)
    result = contract.deploy(
        _shadowcorns_contract=args.shadowcorns_contract_arg,
        _unim_contract=args.unim_contract_arg,
        _rbw_contract=args.rbw_contract_arg,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_verify_contract(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    result = contract.verify_contract()
    print(result)


def handle_begin_hatching(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.begin_hatching(
        terminus_pool_id=args.terminus_pool_id, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_need_to_revert(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    result = contract.need_to_revert(block_number=args.block_number)
    print(result)


def handle_on_erc1155_batch_received(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.on_erc1155_batch_received(
        arg1=args.arg1,
        arg2=args.arg2,
        arg3=args.arg3,
        arg4=args.arg4,
        arg5=args.arg5,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_on_erc1155_received(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.on_erc1155_received(
        arg1=args.arg1,
        arg2=args.arg2,
        arg3=args.arg3,
        arg4=args.arg4,
        arg5=args.arg5,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_on_erc721_received(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.on_erc721_received(
        operator=args.operator,
        from_=args.from_arg,
        token_id=args.token_id,
        data=args.data,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_owner(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    result = contract.owner(block_number=args.block_number)
    print(result)


def handle_proxy_call(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.proxy_call(
        _to=args.to_arg, _data=args.data_arg, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_rbw_contract(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    result = contract.rbw_contract(block_number=args.block_number)
    print(result)


def handle_renounce_ownership(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.renounce_ownership(transaction_config=transaction_config)
    print(result)
    if args.verbose:
        print(result.info())


def handle_retried_count(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    result = contract.retried_count(block_number=args.block_number)
    print(result)


def handle_retry_hatching(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.retry_hatching(
        token_id=args.token_id, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_set_need_to_revert(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.set_need_to_revert(
        _need_to_revert=args.need_to_revert_arg, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_shadowcorns_contract(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    result = contract.shadowcorns_contract(block_number=args.block_number)
    print(result)


def handle_supports_interface(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    result = contract.supports_interface(
        interface_id=args.interface_id, block_number=args.block_number
    )
    print(result)


def handle_transfer_ownership(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.transfer_ownership(
        new_owner=args.new_owner, transaction_config=transaction_config
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_unim_contract(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    result = contract.unim_contract(block_number=args.block_number)
    print(result)


def handle_withdraw_erc20(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.withdraw_erc20(
        token_contract=args.token_contract,
        amount=args.amount,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_withdraw_erc1155(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.withdraw_erc1155(
        token_address=args.token_address,
        token_id=args.token_id,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def handle_withdraw_erc721(args: argparse.Namespace) -> None:
    network.connect(args.network)
    contract = ExploitContract(args.address)
    transaction_config = get_transaction_config(args)
    result = contract.withdraw_erc721(
        token_address=args.token_address,
        token_id=args.token_id,
        transaction_config=transaction_config,
    )
    print(result)
    if args.verbose:
        print(result.info())


def generate_cli() -> argparse.ArgumentParser:
    parser = argparse.ArgumentParser(description="CLI for ExploitContract")
    parser.set_defaults(func=lambda _: parser.print_help())
    subcommands = parser.add_subparsers()

    deploy_parser = subcommands.add_parser("deploy")
    add_default_arguments(deploy_parser, True)
    deploy_parser.add_argument(
        "--shadowcorns-contract-arg", required=True, help="Type: address"
    )
    deploy_parser.add_argument(
        "--unim-contract-arg", required=True, help="Type: address"
    )
    deploy_parser.add_argument(
        "--rbw-contract-arg", required=True, help="Type: address"
    )
    deploy_parser.set_defaults(func=handle_deploy)

    verify_contract_parser = subcommands.add_parser("verify-contract")
    add_default_arguments(verify_contract_parser, False)
    verify_contract_parser.set_defaults(func=handle_verify_contract)

    begin_hatching_parser = subcommands.add_parser("begin-hatching")
    add_default_arguments(begin_hatching_parser, True)
    begin_hatching_parser.add_argument(
        "--terminus-pool-id", required=True, help="Type: uint256", type=int
    )
    begin_hatching_parser.set_defaults(func=handle_begin_hatching)

    need_to_revert_parser = subcommands.add_parser("need-to-revert")
    add_default_arguments(need_to_revert_parser, False)
    need_to_revert_parser.set_defaults(func=handle_need_to_revert)

    on_erc1155_batch_received_parser = subcommands.add_parser(
        "on-erc1155-batch-received"
    )
    add_default_arguments(on_erc1155_batch_received_parser, True)
    on_erc1155_batch_received_parser.add_argument(
        "--arg1", required=True, help="Type: address"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg2", required=True, help="Type: address"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg3", required=True, help="Type: uint256[]", nargs="+"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg4", required=True, help="Type: uint256[]", nargs="+"
    )
    on_erc1155_batch_received_parser.add_argument(
        "--arg5", required=True, help="Type: bytes", type=bytes_argument_type
    )
    on_erc1155_batch_received_parser.set_defaults(func=handle_on_erc1155_batch_received)

    on_erc1155_received_parser = subcommands.add_parser("on-erc1155-received")
    add_default_arguments(on_erc1155_received_parser, True)
    on_erc1155_received_parser.add_argument(
        "--arg1", required=True, help="Type: address"
    )
    on_erc1155_received_parser.add_argument(
        "--arg2", required=True, help="Type: address"
    )
    on_erc1155_received_parser.add_argument(
        "--arg3", required=True, help="Type: uint256", type=int
    )
    on_erc1155_received_parser.add_argument(
        "--arg4", required=True, help="Type: uint256", type=int
    )
    on_erc1155_received_parser.add_argument(
        "--arg5", required=True, help="Type: bytes", type=bytes_argument_type
    )
    on_erc1155_received_parser.set_defaults(func=handle_on_erc1155_received)

    on_erc721_received_parser = subcommands.add_parser("on-erc721-received")
    add_default_arguments(on_erc721_received_parser, True)
    on_erc721_received_parser.add_argument(
        "--operator", required=True, help="Type: address"
    )
    on_erc721_received_parser.add_argument(
        "--from-arg", required=True, help="Type: address"
    )
    on_erc721_received_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    on_erc721_received_parser.add_argument(
        "--data", required=True, help="Type: bytes", type=bytes_argument_type
    )
    on_erc721_received_parser.set_defaults(func=handle_on_erc721_received)

    owner_parser = subcommands.add_parser("owner")
    add_default_arguments(owner_parser, False)
    owner_parser.set_defaults(func=handle_owner)

    proxy_call_parser = subcommands.add_parser("proxy-call")
    add_default_arguments(proxy_call_parser, True)
    proxy_call_parser.add_argument("--to-arg", required=True, help="Type: address")
    proxy_call_parser.add_argument(
        "--data-arg", required=True, help="Type: bytes", type=bytes_argument_type
    )
    proxy_call_parser.set_defaults(func=handle_proxy_call)

    rbw_contract_parser = subcommands.add_parser("rbw-contract")
    add_default_arguments(rbw_contract_parser, False)
    rbw_contract_parser.set_defaults(func=handle_rbw_contract)

    renounce_ownership_parser = subcommands.add_parser("renounce-ownership")
    add_default_arguments(renounce_ownership_parser, True)
    renounce_ownership_parser.set_defaults(func=handle_renounce_ownership)

    retried_count_parser = subcommands.add_parser("retried-count")
    add_default_arguments(retried_count_parser, False)
    retried_count_parser.set_defaults(func=handle_retried_count)

    retry_hatching_parser = subcommands.add_parser("retry-hatching")
    add_default_arguments(retry_hatching_parser, True)
    retry_hatching_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    retry_hatching_parser.set_defaults(func=handle_retry_hatching)

    set_need_to_revert_parser = subcommands.add_parser("set-need-to-revert")
    add_default_arguments(set_need_to_revert_parser, True)
    set_need_to_revert_parser.add_argument(
        "--need-to-revert-arg",
        required=True,
        help="Type: bool",
        type=boolean_argument_type,
    )
    set_need_to_revert_parser.set_defaults(func=handle_set_need_to_revert)

    shadowcorns_contract_parser = subcommands.add_parser("shadowcorns-contract")
    add_default_arguments(shadowcorns_contract_parser, False)
    shadowcorns_contract_parser.set_defaults(func=handle_shadowcorns_contract)

    supports_interface_parser = subcommands.add_parser("supports-interface")
    add_default_arguments(supports_interface_parser, False)
    supports_interface_parser.add_argument(
        "--interface-id", required=True, help="Type: bytes4", type=bytes_argument_type
    )
    supports_interface_parser.set_defaults(func=handle_supports_interface)

    transfer_ownership_parser = subcommands.add_parser("transfer-ownership")
    add_default_arguments(transfer_ownership_parser, True)
    transfer_ownership_parser.add_argument(
        "--new-owner", required=True, help="Type: address"
    )
    transfer_ownership_parser.set_defaults(func=handle_transfer_ownership)

    unim_contract_parser = subcommands.add_parser("unim-contract")
    add_default_arguments(unim_contract_parser, False)
    unim_contract_parser.set_defaults(func=handle_unim_contract)

    withdraw_erc20_parser = subcommands.add_parser("withdraw-erc20")
    add_default_arguments(withdraw_erc20_parser, True)
    withdraw_erc20_parser.add_argument(
        "--token-contract", required=True, help="Type: address"
    )
    withdraw_erc20_parser.add_argument(
        "--amount", required=True, help="Type: uint256", type=int
    )
    withdraw_erc20_parser.set_defaults(func=handle_withdraw_erc20)

    withdraw_erc1155_parser = subcommands.add_parser("withdraw-erc1155")
    add_default_arguments(withdraw_erc1155_parser, True)
    withdraw_erc1155_parser.add_argument(
        "--token-address", required=True, help="Type: address"
    )
    withdraw_erc1155_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    withdraw_erc1155_parser.set_defaults(func=handle_withdraw_erc1155)

    withdraw_erc721_parser = subcommands.add_parser("withdraw-erc721")
    add_default_arguments(withdraw_erc721_parser, True)
    withdraw_erc721_parser.add_argument(
        "--token-address", required=True, help="Type: address"
    )
    withdraw_erc721_parser.add_argument(
        "--token-id", required=True, help="Type: uint256", type=int
    )
    withdraw_erc721_parser.set_defaults(func=handle_withdraw_erc721)

    return parser


def main() -> None:
    parser = generate_cli()
    args = parser.parse_args()
    args.func(args)


if __name__ == "__main__":
    main()
